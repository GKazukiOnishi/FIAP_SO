Windows - Sistema de Arquivos NTFS
	NT -> Versão do Windows
	FS -> File System
	
	NT, XP, 2000
	
	Windows 8, 10 e 11 usa outro, chamado de ReFS (Resilient File System)
		Mas a lógica é basicamente a do NTFS
		
	No FAT
		Podíamos ter 2^64 linhas, cada uma com 4 bytes (32 bits)
		Ou seja, 2^32 * 64 kB
		2^32 * 2^6 * 2^10 = 2^48 -> total de informação que consegue armazenar

	Conjunto de Volumes sobre dois Drives
	
		LCN -> Logical Cluster Nom
		Mesma ideia de cluster
		
		logical drive C: (FAT) 4 GB
		logical drive D: (NTFS) 1 GB
		
		C -> Porque o A era de disquete, B para transferência
		
	Logical Cluser Number (LCN)
		Estrutura lógica do disco
			Cada LCN com 4 setores
			Hoje em dia tem 4kB em cada cluster
	
	Para representar esses LCNs, temos uma tabela também, tipo a FAT
		Master File Table (MFT)
			Cada linha representa um registro de 1 kB, tamanho de 1 kB por linha
			Dessa forma, arquivos pequenos podiam ficar lá mesmo, de até 1 kB
			Uma forma de evitar fragmentação
			
			Cada linha pode indicar onde está o arquivo
			
		Os primeiros 16 registros são do SO, são arquivos de metadados
		0 -> aponta onde tem a tabela mestra de arquivos (MFT), diz que ali começa
		
		O Master Boot Record (MBR) que contém setores dizendo onde está o 0 da MFT, permitindo localizar a tabela
		
		1 -> aponta para uma cópia espelho da MFT
		2 -> alterações em arquivos, pastas, estruturas etc., ficam no arquivo de log apontado por essa linha, permitindo ter uma forma de recuperar
		3 -> informações do disco lógico
				Um arquivo físico pode ter vários discos lógicos
				Mas até onde vai o C? D? etc.
				Qual o tamanho de cada
		4 -> definições de atributos dos arquivos
		5 -> diretório raiz, é a partir dele que começa tudo, a árvore binária
		6 -> Mapa de bits dos blocos utilizados, indica se o bloco está ou não em uso, utilizando bits para isso
		7 -> Aponta para onde está o MBR
				Permite o dual-boot, possibilita indicar onde está o MBR de outro sistema, por exemplo
				Pensando também que o MBR poderia se corromper, permitindo indicar uma versão não corrompida
		8 -> lista de blocos defeituosos, para o SO saber que não deve usar novamente
				verifica se o setor está com defeito ou não, armazenando uma informação e testando dps
		9 -> aponta para uma tabela com informações indicando quais direitos um usuário pode executar no arquivo
		10 -> apona para uma tabela de conversão de letras maiúsculas e minúsculas
				a ASCII é consideravelmente fácil, porque A está em 41, a está em 61, ou seja, para converter pode-se só somar 20.
				O computador faz um OR e AND com os bits
		11 -> Extensão, dá a entender que tudo que não for possível representar anteriormente, fica nele
		
		12, 13, 14, 15 e 16 -> reservados para uso futuro, para caso precisassem mais para frente
		
	Atributos
		Informação-padrao: Timestamp, flags
		Nome do arquivo - Nome em Unicode para evitar problemas
			Até o surgimento do UniCode
		...
		Dados
	
	Ou seja, não é só dado
		Então cada registro tem um formato padrão de um cabeçalho, nome do arquivo, descritor de segurança e finalizamente o Dado
		Para garantir que ele está íntegro, geramos um código hash para verificar  se está válido.
		Armazena quem está usando o arquivo, quem está trabalhando etc.
		
		O endereçamento de informação é meio que pensada em alocação contínua
		Indica onde começa, quantos clusters vai avançar
		
		Portanto, 20, 4 -> indica que começa em 20 e vai até 23
		
		Mas como representar quando ele é muito grande
			O registro do arquivo armazena onde o registro base vai continuar
			Aí ele consegue continuar as séries de blocos até chegar no final
		
	Para abrir um arquivo, intermanete o SO passa
		\??
		-> aí ele sabe que está procurando um arquivo
		E então a partir de um drive lógico, ele vai acessando
		
		Entra na raiz do drive, encontra o arquivo de controle do diretório-raiz
		Com o diretório raiz consegue localizar onde está o arquivo na próxima pasta, e vai indo
		Até encontrar, aí ele cria um novo objeto-arquivo para manipular
		
	


Entrada e Saída
	Gerenciamento de entrada e saída
	
	Tanto discos, quanto pendrives etc.
	Discos -> armazenamento secundário, mas também de entrada e saída
	
	Tem um módulo do SO para esse controle
	
	Tempo de leitura/escrita -> depende do mecanismos do dispositivo
		Existem técnicas para tentar ganhar o máximo de dispositivo no seu uso
	
	Nisso temos Algorimos de escalonamento
	
		Se usarmos o disco, ele começa a girar e tem o tempo de sua latência rotacional
		Se parar, ele para, aí depois precisa girar dnv
		Se for em sequência, ele continua lá sem parar
		
		Já que o Tempo de Seek é o que podemos melhorar usando o software
		Podemos tentar reduzir ele, talvez melhorando o caminho para percorrer o disco
		
		Então surgiram vários algorimos
		
		Algoritmo FCFS
			Tipo FIFO, primeiro a chegar, primeiro a ser atendido
			
			Em um cenário, imagine que o disco tenha 100 cilindros
				Se precisar acessar 33, 72, 47, 08 ...
				O disco vai acabar indo e voltando
				Então fica ruim, não tem muita racionalidade para isso
		
		Algoritmo SSF (SSTF)
			Ir por menor deslocamento, tentar visitar o cilindro mais próximo
			Não precisando ler na ordem necessariamente, porque depois ele poderia organizar
			
			Usando o mesmo cenário, seria 33, 47, 72, 08, considerando que comece no 33
			
			Nisso, os cilindros mais extremos tem uma tendência de serem visitados por último
			
			Braço vai indo do cilindro mais interno ao mais externo e vice-versa
			ce <> ci
			
			Imaginando que na maioria das vezes, o braço fique mais ou menos no meio, e o criterio é ir para o mais próximo
			Isso vai fazer com que o braço fique preso na região central
			Já que só vai nos próximos de onde está
			
			Então pode ser que tenha um tempo bom, ou um tempo maior
			E isso é ruim, porque vai gerar uma variância
			
			Nisso, você até pode ser o primeiro a "chegar", mas isso não significa que vai ter o retorno primeiro
			
			Imagine agora que algum arquivo cresça, e a posição livre está lá longe
			Para ler, vai demorar muito, porque vai estar lá longe do meio
			
		Algoritmo SCAN (usado até hj)
			Algoritmo do elevador
			
			Ele vai até o último andar, depois desce até o final
			Ele faz uma varredura ao longo da superfície do disco
			
			Ele até procura o mais próximo, mas respeita um sentido preferencial
			E vai depois até o último que precisar naquele lado, depois volta
			
			Nisso o tempo de resposta fica mais uniforme
			Não vai demorar tanto assim
			
			Teste de Scanner é movimentar o braço para passar por todos os cilindros
			
		Algoritmo C-SCAN
			Complete SCAN
			
			Ideia de que, mesmo não precisando ir até o cilindro 0, sempre faço o caminho todo
			Vou até o 0, depois vou até o último
			Isso tudo mesmo sem precisar
			
			Então ele não foi implementado
			
		Algoritmo LOOK
			A partir da ideia anterior
			
			Vai lá e sabe que vai ler um arquivo
			Pega da tabela e sabe onde visitar
			
			Então vou traçar o caminho que nem o SCAN
			E vou me movimentando
			Mas e SE alguma solicitação nova quiser visitar um cilindro no trajeto, porque não aproveitar?
			
			Nisso, ele faz o caminho do SCAN, mas se algo no caminho estiver próximo, eu atendo também
			
	Com o surgimento de discos de alto desempenho
		Para eles, o tempo de seek pode ser menor que o tempo para completar uma volta inteira
		
		Tseek menor que o Tlr
		
		Usando o algoritmo, as vezes precisamos ir percorrendo e dando várias voltas
		Mas se o tempo de uma volta completa for menor, porque não usar o braço para movimentar um pouco e evitar voltas desnecessárias?
		
		Native Command Queuing (NCQ)
			Isso é a ideia do NCQ
			
			Ele movimenta o braço se for valer a pena, se for reduzir a quantia de voltas que daria no disc
			
			Ao invés de ir girando o disco todo
			Pode traçar um caminho melhor com menos voltas
			
		
			
			
		
		
		
			
	
		
		
		
		
		
			
		